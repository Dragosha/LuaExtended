{
	"scope" : "source.luae - string",
	"completions":
	[
		// Constants
		"_G",
		"_VERSION",
		{ "trigger": "package_cpath", "contents": "package.cpath" },
		{ "trigger": "package_loaded", "contents": "package.loaded" },
		{ "trigger": "package_loaders", "contents": "package.loaders" },
		{ "trigger": "package_path", "contents": "package.path" },
		{ "trigger": "package_preload", "contents": "package.preload" },
		{ "trigger": "math_pi", "contents": "math.pi" },
		{ "trigger": "math_huge", "contents": "math.huge" },

		// No-arg functions
		{ "trigger": "coroutine_running()", "contents": "coroutine.running()" },
		{ "trigger": "io_flush()", "contents": "io.flush()" },
		{ "trigger": "io_tmpfile()", "contents": "io.tmpfile()" },
		{ "trigger": "os_clock()", "contents": "os.clock()" },
		{ "trigger": "os_tmpname()", "contents": "os.tmpname()" },
		{ "trigger": "debug_debug()", "contents": "debug.debug()" },
		{ "trigger": "debug_getregistry()", "contents": "debug.getregistry()" },

		// The rest
		{ "trigger": "assert( v, message )", "contents": "assert( ${1:v}, ${2:message} )" },
		{ "trigger": "collectgarbage( opt, arg )", "contents": "collectgarbage( ${1:opt}, ${2:arg} )" },
		{ "trigger": "dofile( filename )", "contents": "dofile( ${1:filename} )" },
		{ "trigger": "error( message, level )", "contents": "error( ${1:message}, ${2:level} )" },
		{ "trigger": "getfenv( f )", "contents": "getfenv( ${1:f} )" },
		{ "trigger": "getmetatable( object )", "contents": "getmetatable( ${1:object} )" },
		{ "trigger": "ipairs( t )", "contents": "ipairs( ${1:t} )" },
		{ "trigger": "load( func, chunkname )", "contents": "load( ${1:func}, ${2:chunkname} )" },
		{ "trigger": "loadfile( filename )", "contents": "loadfile( ${1:filename} )" },
		{ "trigger": "loadstring( string, chunkname )", "contents": "loadstring( ${1:string}, ${2:chunkname} )" },
		{ "trigger": "next( table, index )", "contents": "next( ${1:table}, ${2:index} )" },
		{ "trigger": "pairs( t )", "contents": "pairs( ${1:t} )" },
		{ "trigger": "pcall( f, arg1, ... )", "contents": "pcall( ${1:f}, ${2:arg1}, ${3:...} )" },
		{ "trigger": "print( ... )", "contents": "print( ${1:...} )" },
		{ "trigger": "rawequal( v1, v2 )", "contents": "rawequal( ${1:v1}, ${2:v2} )" },
		{ "trigger": "rawget( table, index )", "contents": "rawget( ${1:table}, ${2:index} )" },
		{ "trigger": "rawset( table, index, value )", "contents": "rawset( ${1:table}, ${2:index}, ${3:value} )" },
		{ "trigger": "select( index, ... )", "contents": "select( ${1:index}, ${2:...} )" },
		{ "trigger": "setfenv( f, table )", "contents": "setfenv( ${1:f}, ${2:table} )" },
		{ "trigger": "setmetatable( table, metatable )", "contents": "setmetatable( ${1:table}, ${2:metatable} )" },
		{ "trigger": "tonumber( e, base )", "contents": "tonumber( ${1:e}, ${2:base} )" },
		{ "trigger": "tostring( e )", "contents": "tostring( ${1:e} )" },
		{ "trigger": "type( v )", "contents": "type( ${1:v} )" },
		{ "trigger": "unpack( list, i, j )", "contents": "unpack( ${1:list}, ${2:i}, ${3:j} )" },
		{ "trigger": "xpcall( f, err )", "contents": "xpcall( ${1:f}, ${2:err} )" },
		{ "trigger": "coroutine_create( f )", "contents": "coroutine.create( ${1:f} )" },
		{ "trigger": "coroutine_resume( co, val1, ... )", "contents": "coroutine.resume( ${1:co}, ${2:val1}, ${3:...} )" },
		{ "trigger": "coroutine_status( co )", "contents": "coroutine.status( ${1:co} )" },
		{ "trigger": "coroutine_wrap( f )", "contents": "coroutine.wrap( ${1:f} )" },
		{ "trigger": "coroutine_yield( ... )", "contents": "coroutine.yield( ${1:...} )" },
		{ "trigger": "module( name, ... )", "contents": "module( ${1:name}, ${2:...} )" },
		{ "trigger": "require( modname )", "contents": "require( ${1:modname} )" },
		{ "trigger": "package_loadlib( libname, funcname )", "contents": "package.loadlib( ${1:libname}, ${2:funcname} )" },
		{ "trigger": "package_seeall( module )", "contents": "package.seeall( ${1:module} )" },
		{ "trigger": "string_byte( s, i, j )", "contents": "string.byte( ${1:s}, ${2:i}, ${3:j} )" },
		{ "trigger": "string_char( ... )", "contents": "string.char( ${1:...} )" },
		{ "trigger": "string_dump( function )", "contents": "string.dump( ${1:func} )" },
		{ "trigger": "string_find( s, pattern, init, plain )", "contents": "string.find( ${1:s}, ${2:pattern}, ${3:init}, ${4:plain} )" },
		{ "trigger": "string_format( formatstring, ... )", "contents": "string.format( ${1:formatstring}, ${2:...} )" },
		{ "trigger": "string_gmatch( s, pattern )", "contents": "string.gmatch( ${1:s}, ${2:pattern} )" },
		{ "trigger": "string_gsub( s, pattern, repl, n )", "contents": "string.gsub( ${1:s}, ${2:pattern}, ${3:repl}, ${4:n} )" },
		{ "trigger": "string_len( s )", "contents": "string.len( ${1:s} )" },
		{ "trigger": "string_lower( s )", "contents": "string.lower( ${1:s} )" },
		{ "trigger": "string_match( s, pattern, init )", "contents": "string.match( ${1:s}, ${2:pattern}, ${3:init} )" },
		{ "trigger": "string_rep( s, n )", "contents": "string.rep( ${1:s}, ${2:n} )" },
		{ "trigger": "string_reverse( s )", "contents": "string.reverse( ${1:s} )" },
		{ "trigger": "string_sub( s, i, j )", "contents": "string.sub( ${1:s}, ${2:i}, ${3:j} )" },
		{ "trigger": "string_upper( s )", "contents": "string.upper( ${1:s} )" },
		{ "trigger": "table_concat( table, sep, i, j )", "contents": "table.concat( ${1:table}, ${2:sep}, ${3:i}, ${4:j} )" },
		{ "trigger": "table_insert( table, pos, value )", "contents": "table.insert( ${1:table}, ${2:pos}, ${3:value} )" },
		{ "trigger": "table_maxn( table )", "contents": "table.maxn( ${1:table} )" },
		{ "trigger": "table_remove( table, pos )", "contents": "table.remove( ${1:table}, ${2:pos} )" },
		{ "trigger": "table_sort( table, comp )", "contents": "table.sort( ${1:table}, ${2:comp} )" },
		{ "trigger": "math_abs( x )", "contents": "math.abs( ${1:x} )" },
		{ "trigger": "math_acos( x )", "contents": "math.acos( ${1:x} )" },
		{ "trigger": "math_asin( x )", "contents": "math.asin( ${1:x} )" },
		{ "trigger": "math_atan( x )", "contents": "math.atan( ${1:x} )" },
		{ "trigger": "math_atan2( y, x )", "contents": "math.atan2( ${1:y}, ${2:x} )" },
		{ "trigger": "math_ceil( x )", "contents": "math.ceil( ${1:x} )" },
		{ "trigger": "math_cos( x )", "contents": "math.cos( ${1:x} )" },
		{ "trigger": "math_cosh( x )", "contents": "math.cosh( ${1:x} )" },
		{ "trigger": "math_deg( x )", "contents": "math.deg( ${1:x} )" },
		{ "trigger": "math_exp( x )", "contents": "math.exp( ${1:x} )" },
		{ "trigger": "math_floor( x )", "contents": "math.floor( ${1:x} )" },
		{ "trigger": "math_fmod( x, y )", "contents": "math.fmod( ${1:x}, ${2:y} )" },
		{ "trigger": "math_frexp( x )", "contents": "math.frexp( ${1:x} )" },
		{ "trigger": "math_ldexp( m, e )", "contents": "math.ldexp( ${1:m}, ${2:e} )" },
		{ "trigger": "math_log( x )", "contents": "math.log( ${1:x} )" },
		{ "trigger": "math_log10( x )", "contents": "math.log10( ${1:x} )" },
		{ "trigger": "math_max( x, ... )", "contents": "math.max( ${1:x}, ${2:...} )" },
		{ "trigger": "math_min( x, ... )", "contents": "math.min( ${1:x}, ${2:...} )" },
		{ "trigger": "math_modf( x )", "contents": "math.modf( ${1:x} )" },
		{ "trigger": "math_pow( x, y )", "contents": "math.pow( ${1:x}, ${2:y} )" },
		{ "trigger": "math_rad( x )", "contents": "math.rad( ${1:x} )" },
		{ "trigger": "math_random( m, n )", "contents": "math.random( ${1:m}, ${2:n} )" },
		{ "trigger": "math_randomseed( x )", "contents": "math.randomseed( ${1:x} )" },
		{ "trigger": "math_sin( x )", "contents": "math.sin( ${1:x} )" },
		{ "trigger": "math_sinh( x )", "contents": "math.sinh( ${1:x} )" },
		{ "trigger": "math_sqrt( x )", "contents": "math.sqrt( ${1:x} )" },
		{ "trigger": "math_tan( x )", "contents": "math.tan( ${1:x} )" },
		{ "trigger": "math_tanh( x )", "contents": "math.tanh( ${1:x} )" },
		{ "trigger": "io_close( file )", "contents": "io.close( ${1:file} )" },
		{ "trigger": "io_input( file )", "contents": "io.input( ${1:file} )" },
		{ "trigger": "io_lines( filename )", "contents": "io.lines( ${1:filename} )" },
		{ "trigger": "io_open( filename, mode )", "contents": "io.open( ${1:filename}, ${2:mode} )" },
		{ "trigger": "io_output( file )", "contents": "io.output( ${1:file} )" },
		{ "trigger": "io_popen( prog, mode )", "contents": "io.popen( ${1:prog}, ${2:mode} )" },
		{ "trigger": "io_read( ... )", "contents": "io.read( ${1:...} )" },
		{ "trigger": "io_type( obj )", "contents": "io.type( ${1:obj} )" },
		{ "trigger": "io_write( ... )", "contents": "io.write( ${1:...} )" },
		{ "trigger": "os_date( format, time )", "contents": "os.date( ${1:format}, ${2:time} )" },
		{ "trigger": "os_difftime( t2, t1 )", "contents": "os.difftime( ${1:t2}, ${2:t1} )" },
		{ "trigger": "os_execute( command )", "contents": "os.execute( ${1:command} )" },
		{ "trigger": "os_exit( code )", "contents": "os.exit( ${1:code} )" },
		{ "trigger": "os_getenv( varname )", "contents": "os.getenv( ${1:varname} )" },
		{ "trigger": "os_remove( filename )", "contents": "os.remove( ${1:filename} )" },
		{ "trigger": "os_rename( oldname, newname )", "contents": "os.rename( ${1:oldname}, ${2:newname} )" },
		{ "trigger": "os_setlocale( locale, category )", "contents": "os.setlocale( ${1:locale}, ${2:category} )" },
		{ "trigger": "os_time( table )", "contents": "os.time( ${1:table} )" },
		{ "trigger": "debug_getfenv( o )", "contents": "debug.getfenv( ${1:o} )" },
		{ "trigger": "debug_gethook( thread )", "contents": "debug.gethook( ${1:thread} )" },
		{ "trigger": "debug_getinfo( thread, function, what )", "contents": "debug.getinfo( ${1:thread}, ${2:func}, ${3:what} )" },
		{ "trigger": "debug_getlocal( thread, level, local )", "contents": "debug.getlocal( ${1:thread}, ${2:level}, ${3:local} )" },
		{ "trigger": "debug_getmetatable( object )", "contents": "debug.getmetatable( ${1:object} )" },
		{ "trigger": "debug_getupvalue( func, up )", "contents": "debug.getupvalue( ${1:func}, ${2:up} )" },
		{ "trigger": "debug_setfenv( object, table )", "contents": "debug.setfenv( ${1:object}, ${2:table} )" },
		{ "trigger": "debug_sethook( thread, hook, mask, count )", "contents": "debug.sethook( ${1:thread}, ${2:hook}, ${3:mask}, ${4:count} )" },
		{ "trigger": "debug_setlocal( thread, level, local, value )", "contents": "debug.setlocal( ${1:thread}, ${2:level}, ${3:local}, ${4:value} )" },
		{ "trigger": "debug_setmetatable( object, table )", "contents": "debug.setmetatable( ${1:object}, ${2:table} )" },
		{ "trigger": "debug_setupvalue( func, up, value )", "contents": "debug.setupvalue( ${1:func}, ${2:up}, ${3:value} )" },
		{ "trigger": "debug_traceback( thread, message, level )", "contents": "debug.traceback( ${1:thread}, ${2:message}, ${3:level} )" },

		// Defold API triggers
		//CRASH
		{ "trigger": "crash_get_backtrace(handle)","contents": "crash.get_backtrace(${1:handle})" },
		{ "trigger": "crash_get_extra_data(handle)","contents": "crash.get_extra_data(${1:handle})" },
		{ "trigger": "crash_get_modules(handle)","contents": "crash.get_modules(${1:handle})" },
		{ "trigger": "crash_get_signum(handle)","contents": "crash.get_signum(${1:handle})" },
		{ "trigger": "crash_get_sys_field(handle, index)","contents": "crash.get_sys_field(${1:handle}, ${2:index})" },
		{ "trigger": "crash_get_user_field(handle, index)","contents": "crash.get_user_field(${1:handle}, ${2:index})" },
		{ "trigger": "crash_load_previous()","contents": "crash.load_previous()" },
		{ "trigger": "crash_release(handle)","contents": "crash.release(${1:handle})" },
		{ "trigger": "crash_set_file_path(path)","contents": "crash.set_file_path(${1:path})" },
		{ "trigger": "crash_set_user_field(index, value)","contents": "crash.set_user_field(${1:index}, ${2:value})" },
		{ "trigger": "crash_write_dump()","contents": "crash.write_dump()" },
		//GUI
		{ "trigger": "gui_animate(node, property, to, easing, duration, [delay], [complete_function], [playback])","contents": "gui.animate(${1:node}, ${2:property}, ${3:to}, ${4:easing}, ${5:duration}, ${6:[delay]}, ${7:[complete_function]}, ${8:[playback]})" },
		{ "trigger": "gui_cancel_animation(node, property)","contents": "gui.cancel_animation(${1:node}, ${2:property})" },
		{ "trigger": "gui_cancel_flipbook(node)","contents": "gui.cancel_flipbook(${1:node})" },
		{ "trigger": "gui_cancel_spine(node)","contents": "gui.cancel_spine(${1:node})" },
		{ "trigger": "gui_clone(node)","contents": "gui.clone(${1:node})" },
		{ "trigger": "gui_clone_tree(node)","contents": "gui.clone_tree(${1:node})" },
		{ "trigger": "gui_delete_node(node)","contents": "gui.delete_node(${1:node})" },
		{ "trigger": "gui_delete_texture(texture)","contents": "gui.delete_texture(${1:texture})" },
		{ "trigger": "gui_get_adjust_mode(node)","contents": "gui.get_adjust_mode(${1:node})" },
		{ "trigger": "gui_get_blend_mode(node)","contents": "gui.get_blend_mode(${1:node})" },
		{ "trigger": "gui_get_clipping_inverted(node)","contents": "gui.get_clipping_inverted(${1:node})" },
		{ "trigger": "gui_get_clipping_mode(node)","contents": "gui.get_clipping_mode(${1:node})" },
		{ "trigger": "gui_get_clipping_visible(node)","contents": "gui.get_clipping_visible(${1:node})" },
		{ "trigger": "gui_get_color(node)","contents": "gui.get_color(${1:node})" },
		{ "trigger": "gui_get_fill_angle(node)","contents": "gui.get_fill_angle(${1:node})" },
		{ "trigger": "gui_get_flipbook(node)","contents": "gui.get_flipbook(${1:node})" },
		{ "trigger": "gui_get_font(node)","contents": "gui.get_font(${1:node})" },
		{ "trigger": "gui_get_height()","contents": "gui.get_height()" },
		{ "trigger": "gui_get_id(node)","contents": "gui.get_id(${1:node})" },
		{ "trigger": "gui_get_index(node)","contents": "gui.get_index(${1:node})" },
		{ "trigger": "gui_get_inner_radius(node)","contents": "gui.get_inner_radius(${1:node})" },
		{ "trigger": "gui_get_layer(node)","contents": "gui.get_layer(${1:node})" },
		{ "trigger": "gui_get_layout()","contents": "gui.get_layout()" },
		{ "trigger": "gui_get_leading(node)","contents": "gui.get_leading(${1:node})" },
		{ "trigger": "gui_get_line_break(node)","contents": "gui.get_line_break(${1:node})" },
		{ "trigger": "gui_get_node(id)","contents": "gui.get_node(${1:id})" },
		{ "trigger": "gui_get_outer_bounds(node)","contents": "gui.get_outer_bounds(${1:node})" },
		{ "trigger": "gui_get_outline(node)","contents": "gui.get_outline(${1:node})" },
		{ "trigger": "gui_get_parent(node)","contents": "gui.get_parent(${1:node})" },
		{ "trigger": "gui_get_particlefx(node)","contents": "gui.get_particlefx(${1:node})" },
		{ "trigger": "gui_get_perimeter_vertices(node)","contents": "gui.get_perimeter_vertices(${1:node})" },
		{ "trigger": "gui_get_pivot(node)","contents": "gui.get_pivot(${1:node})" },
		{ "trigger": "gui_get_position(node)","contents": "gui.get_position(${1:node})" },
		{ "trigger": "gui_get_rotation(node)","contents": "gui.get_rotation(${1:node})" },
		{ "trigger": "gui_get_scale(node)","contents": "gui.get_scale(${1:node})" },
		{ "trigger": "gui_get_screen_position(node)","contents": "gui.get_screen_position(${1:node})" },
		{ "trigger": "gui_get_shadow(node)","contents": "gui.get_shadow(${1:node})" },
		{ "trigger": "gui_get_size(node)","contents": "gui.get_size(${1:node})" },
		{ "trigger": "gui_get_size_mode(node)","contents": "gui.get_size_mode(${1:node})" },
		{ "trigger": "gui_get_slice9(node)","contents": "gui.get_slice9(${1:node})" },
		{ "trigger": "gui_get_spine_bone(node, bone_id)","contents": "gui.get_spine_bone(${1:node}, ${2:bone_id})" },
		{ "trigger": "gui_get_spine_cursor(node)","contents": "gui.get_spine_cursor(${1:node})" },
		{ "trigger": "gui_get_spine_playback_rate(node)","contents": "gui.get_spine_playback_rate(${1:node})" },
		{ "trigger": "gui_get_spine_scene(node)","contents": "gui.get_spine_scene(${1:node})" },
		{ "trigger": "gui_get_spine_skin(node)","contents": "gui.get_spine_skin(${1:node})" },
		{ "trigger": "gui_get_text(node)","contents": "gui.get_text(${1:node})" },
		{ "trigger": "gui_get_text_metrics(font, text, width, line_breaks, leading, tracking)","contents": "gui.get_text_metrics(${1:font}, ${2:text}, ${3:width}, ${4:line_breaks}, ${5:leading}, ${6:tracking})" },
		{ "trigger": "gui_get_text_metrics_from_node(node)","contents": "gui.get_text_metrics_from_node(${1:node})" },
		{ "trigger": "gui_get_texture(node)","contents": "gui.get_texture(${1:node})" },
		{ "trigger": "gui_get_tracking(node)","contents": "gui.get_tracking(${1:node})" },
		{ "trigger": "gui_get_width()","contents": "gui.get_width()" },
		{ "trigger": "gui_get_xanchor(node)","contents": "gui.get_xanchor(${1:node})" },
		{ "trigger": "gui_get_yanchor(node)","contents": "gui.get_yanchor(${1:node})" },
		{ "trigger": "gui_hide_keyboard()","contents": "gui.hide_keyboard()" },
		{ "trigger": "gui_is_enabled(node)","contents": "gui.is_enabled(${1:node})" },
		{ "trigger": "gui_move_above(node, node)","contents": "gui.move_above(${1:node}, ${2:node})" },
		{ "trigger": "gui_move_below(node, node)","contents": "gui.move_below(${1:node}, ${2:node})" },
		{ "trigger": "gui_new_box_node(pos, size)","contents": "gui.new_box_node(${1:pos}, ${2:size})" },
		{ "trigger": "gui_new_particlefx_node(pos, particlefx)","contents": "gui.new_particlefx_node(${1:pos}, ${2:particlefx})" },
		{ "trigger": "gui_new_pie_node(pos, size)","contents": "gui.new_pie_node(${1:pos}, ${2:size})" },
		{ "trigger": "gui_new_spine_node(pos, spine_scene)","contents": "gui.new_spine_node(${1:pos}, ${2:spine_scene})" },
		{ "trigger": "gui_new_text_node(pos, text)","contents": "gui.new_text_node(${1:pos}, ${2:text})" },
		{ "trigger": "gui_new_texture(texture, width, height, type, buffer, flip)","contents": "gui.new_texture(${1:texture}, ${2:width}, ${3:height}, ${4:type}, ${5:buffer}, ${6:flip})" },
		{ "trigger": "gui_pick_node(node, x, y)","contents": "gui.pick_node(${1:node}, ${2:x}, ${2:y})" },
		{ "trigger": "gui_play_flipbook(node, animation, [complete_function])","contents": "gui.play_flipbook(${1:node}, ${2:animation}, ${3:[complete_function]})" },
		{ "trigger": "gui_play_particlefx(node, [emitter_state_function])","contents": "gui.play_particlefx(${1:node}, ${2:[emitter_state_function]})" },
		{ "trigger": "gui_play_spine_anim(node, animation_id, playback, [play_properties], [complete_function])","contents": "gui.play_spine_anim(${1:node}, ${2:animation_id}, ${3:playback}, ${4:[play_properties]}, ${5:[complete_function]})" },
		{ "trigger": "gui_reset_keyboard()","contents": "gui.reset_keyboard()" },
		{ "trigger": "gui_reset_nodes()","contents": "gui.reset_nodes()" },
		{ "trigger": "gui_set_adjust_mode(node, adjust_mode)","contents": "gui.set_adjust_mode(${1:node}, ${2:adjust_mode})" },
		{ "trigger": "gui_set_blend_mode(node, blend_mode)","contents": "gui.set_blend_mode(${1:node}, ${2:blend_mode})" },
		{ "trigger": "gui_set_clipping_inverted(node, inverted)","contents": "gui.set_clipping_inverted(${1:node}, ${2:inverted})" },
		{ "trigger": "gui_set_clipping_mode(node, clipping_mode)","contents": "gui.set_clipping_mode(${1:node}, ${2:clipping_mode})" },
		{ "trigger": "gui_set_clipping_visible(node, visible)","contents": "gui.set_clipping_visible(${1:node}, ${2:visible})" },
		{ "trigger": "gui_set_color(node, color)","contents": "gui.set_color(${1:node}, ${2:color})" },
		{ "trigger": "gui_set_enabled(node, enabled)","contents": "gui.set_enabled(${1:node}, ${2:enabled})" },
		{ "trigger": "gui_set_fill_angle(node, angle)","contents": "gui.set_fill_angle(${1:node}, ${2:angle})" },
		{ "trigger": "gui_set_font(node, font)","contents": "gui.set_font(${1:node}, ${2:font})" },
		{ "trigger": "gui_set_id(node, id)","contents": "gui.set_id(${1:node}, ${2:id})" },
		{ "trigger": "gui_set_inner_radius(node, radius)","contents": "gui.set_inner_radius(${1:node}, ${2:radius})" },
		{ "trigger": "gui_set_layer(node, layer)","contents": "gui.set_layer(${1:node}, ${2:layer})" },
		{ "trigger": "gui_set_leading(node, leading)","contents": "gui.set_leading(${1:node}, ${2:leading})" },
		{ "trigger": "gui_set_line_break(node, line-break)","contents": "gui.set_line_break(${1:node}, ${2:line-break})" },
		{ "trigger": "gui_set_outer_bounds(node, bounds_mode)","contents": "gui.set_outer_bounds(${1:node}, ${2:bounds_mode})" },
		{ "trigger": "gui_set_outline(node, color)","contents": "gui.set_outline(${1:node}, ${2:color})" },
		{ "trigger": "gui_set_parent(node, parent)","contents": "gui.set_parent(${1:node}, ${2:parent})" },
		{ "trigger": "gui_set_particlefx(node, particlefx)","contents": "gui.set_particlefx(${1:node}, ${2:particlefx})" },
		{ "trigger": "gui_set_perimeter_vertices(node, vertices)","contents": "gui.set_perimeter_vertices(${1:node}, ${2:vertices})" },
		{ "trigger": "gui_set_pivot(node, pivot)","contents": "gui.set_pivot(${1:node}, ${2:pivot})" },
		{ "trigger": "gui_set_position(node, position)","contents": "gui.set_position(${1:node}, ${2:position})" },
		{ "trigger": "gui_set_render_order(order)","contents": "gui.set_render_order(${1:order})" },
		{ "trigger": "gui_set_rotation(node, rotation)","contents": "gui.set_rotation(${1:node}, ${2:rotation})" },
		{ "trigger": "gui_set_scale(node, scale)","contents": "gui.set_scale(${1:node}, ${2:scale})" },
		{ "trigger": "gui_set_shadow(node, color)","contents": "gui.set_shadow(${1:node}, ${2:color})" },
		{ "trigger": "gui_set_size(node, size)","contents": "gui.set_size(${1:node}, ${2:size})" },
		{ "trigger": "gui_set_size_mode(node, size_mode)","contents": "gui.set_size_mode(${1:node}, ${2:size_mode})" },
		{ "trigger": "gui_set_slice9(node, values)","contents": "gui.set_slice9(${1:node}, ${2:values})" },
		{ "trigger": "gui_set_spine_cursor(node, cursor)","contents": "gui.set_spine_cursor(${1:node}, ${2:cursor})" },
		{ "trigger": "gui_set_spine_playback_rate(node, playback_rate)","contents": "gui.set_spine_playback_rate(${1:node}, ${2:playback_rate})" },
		{ "trigger": "gui_set_spine_scene(node, spine_scene)","contents": "gui.set_spine_scene(${1:node}, ${2:spine_scene})" },
		{ "trigger": "gui_set_spine_skin(node, spine_skin, [spine_slot])","contents": "gui.set_spine_skin(${1:node}, ${2:spine_skin}, ${3:[spine_slot]})" },
		{ "trigger": "gui_set_text(node, text)","contents": "gui.set_text(${1:node}, ${2:text})" },
		{ "trigger": "gui_set_texture(node, texture)","contents": "gui.set_texture(${1:node}, ${2:texture})" },
		{ "trigger": "gui_set_texture_data(texture, width, height, type, buffer, flip)","contents": "gui.set_texture_data(${1:texture}, ${2:width}, ${3:height}, ${4:type}, ${5:buffer}, ${6:flip})" },
		{ "trigger": "gui_set_tracking(node, tracking)","contents": "gui.set_tracking(${1:node}, ${2:tracking})" },
		{ "trigger": "gui_set_xanchor(node, anchor)","contents": "gui.set_xanchor(${1:node}, ${2:anchor})" },
		{ "trigger": "gui_set_yanchor(node, anchor)","contents": "gui.set_yanchor(${1:node}, ${2:anchor})" },
		{ "trigger": "gui_show_keyboard(type, autoclose)","contents": "gui.show_keyboard(${1:type}, ${2:autoclose})" },
		{ "trigger": "gui_stop_particlefx(node)","contents": "gui.stop_particlefx(${1:node})" },
		//GUI.MESSAGES
		{ "trigger": "gui_layout_changed","contents": "layout_changed" },
		// GUI CONSTANTS
		{ "trigger": "gui_PLAYBACK_LOOP_BACKWARD", "contents": "gui.PLAYBACK_LOOP_BACKWARD" },
		{ "trigger": "gui_PLAYBACK_LOOP_FORWARD", "contents": "gui.PLAYBACK_LOOP_FORWARD" },
		{ "trigger": "gui_PLAYBACK_LOOP_PINGPONG", "contents": "gui.PLAYBACK_LOOP_PINGPONG" },
		{ "trigger": "gui_PLAYBACK_ONCE_BACKWARD", "contents": "gui.PLAYBACK_ONCE_BACKWARD" },
		{ "trigger": "gui_PLAYBACK_ONCE_FORWARD", "contents": "gui.PLAYBACK_ONCE_FORWARD" },
		{ "trigger": "gui_PLAYBACK_ONCE_PINGPONG", "contents": "gui.PLAYBACK_ONCE_PINGPONG"},
		{ "trigger": "gui_EASING_INBACK", "contents": "gui.EASING_INBACK"},
		{ "trigger": "gui_EASING_INBOUNCE", "contents": "gui.EASING_INBOUNCE"},
		{ "trigger": "gui_EASING_INCIRC", "contents": "gui.EASING_INCIRC"},
		{ "trigger": "gui_EASING_INCUBIC", "contents": "gui.EASING_INCUBIC"},
		{ "trigger": "gui_EASING_INELASTIC", "contents": "gui.EASING_INELASTIC"},
		{ "trigger": "gui_EASING_INEXPO", "contents": "gui.EASING_INEXPO"},
		{ "trigger": "gui_EASING_INOUTBACK", "contents": "gui.EASING_INOUTBACK"},
		{ "trigger": "gui_EASING_INOUTBOUNCE", "contents": "gui.EASING_INOUTBOUNCE"},
		{ "trigger": "gui_EASING_INOUTCIRC", "contents": "gui.EASING_INOUTCIRC"},
		{ "trigger": "gui_EASING_INOUTCUBIC", "contents": "gui.EASING_INOUTCUBIC"},
		{ "trigger": "gui_EASING_INOUTELASTIC", "contents": "gui.EASING_INOUTELASTIC"},
		{ "trigger": "gui_EASING_INOUTEXPO", "contents": "gui.EASING_INOUTEXPO"},
		{ "trigger": "gui_EASING_INOUTQUAD", "contents": "gui.EASING_INOUTQUAD"},
		{ "trigger": "gui_EASING_INOUTQUART", "contents": "gui.EASING_INOUTQUART"},
		{ "trigger": "gui_EASING_INOUTQUINT", "contents": "gui.EASING_INOUTQUINT"},
		{ "trigger": "gui_EASING_INOUTSINE", "contents": "gui.EASING_INOUTSINE"},
		{ "trigger": "gui_EASING_INQUAD", "contents": "gui.EASING_INQUAD"},
		{ "trigger": "gui_EASING_INQUART", "contents": "gui.EASING_INQUART"},
		{ "trigger": "gui_EASING_INQUINT", "contents": "gui.EASING_INQUINT"},
		{ "trigger": "gui_EASING_INSINE", "contents": "gui.EASING_INSINE"},
		{ "trigger": "gui_EASING_LINEAR", "contents": "gui.EASING_LINEAR"},
		{ "trigger": "gui_EASING_OUTBACK", "contents": "gui.EASING_OUTBACK"},
		{ "trigger": "gui_EASING_OUTBOUNCE", "contents": "gui.EASING_OUTBOUNCE"},
		{ "trigger": "gui_EASING_OUTCIRC", "contents": "gui.EASING_OUTCIRC"},
		{ "trigger": "gui_EASING_OUTCUBIC", "contents": "gui.EASING_OUTCUBIC"},
		{ "trigger": "gui_EASING_OUTELASTIC", "contents": "gui.EASING_OUTELASTIC"},
		{ "trigger": "gui_EASING_OUTEXPO", "contents": "gui.EASING_OUTEXPO"},
		{ "trigger": "gui_EASING_OUTINBACK", "contents": "gui.EASING_OUTINBACK"},
		{ "trigger": "gui_EASING_OUTINBOUNCE", "contents": "gui.EASING_OUTINBOUNCE"},
		{ "trigger": "gui_EASING_OUTINCIRC", "contents": "gui.EASING_OUTINCIRC"},
		{ "trigger": "gui_EASING_OUTINCUBIC", "contents": "gui.EASING_OUTINCUBIC"},
		{ "trigger": "gui_EASING_OUTINELASTIC", "contents": "gui.EASING_OUTINELASTIC"},
		{ "trigger": "gui_EASING_OUTINEXPO", "contents": "gui.EASING_OUTINEXPO"},
		{ "trigger": "gui_EASING_OUTINQUAD", "contents": "gui.EASING_OUTINQUAD"},
		{ "trigger": "gui_EASING_OUTINQUART", "contents": "gui.EASING_OUTINQUART"},
		{ "trigger": "gui_EASING_OUTINQUINT", "contents": "gui.EASING_OUTINQUINT"},
		{ "trigger": "gui_EASING_OUTINSINE", "contents": "gui.EASING_OUTINSINE"},
		{ "trigger": "gui_EASING_OUTQUAD", "contents": "gui.EASING_OUTQUAD"},
		{ "trigger": "gui_EASING_OUTQUART", "contents": "gui.EASING_OUTQUART"},
		{ "trigger": "gui_EASING_OUTQUINT", "contents": "gui.EASING_OUTQUINT"},
		{ "trigger": "gui_EASING_OUTSINE", "contents": "gui.EASING_OUTSINE"},
		{ "trigger": "gui_ADJUST_FIT", "contents": "gui.ADJUST_FIT"},
		{ "trigger": "gui_ADJUST_STRETCH", "contents": "gui.ADJUST_STRETCH"},
		{ "trigger": "gui_ADJUST_ZOOM", "contents": "gui.ADJUST_ZOOM"},
		{ "trigger": "gui_ANCHOR_BOTTOM", "contents": "gui.ANCHOR_BOTTOM"},
		{ "trigger": "gui_ANCHOR_LEFT", "contents": "gui.ANCHOR_LEFT"},
		{ "trigger": "gui_ANCHOR_RIGHT", "contents": "gui.ANCHOR_RIGHT"},
		{ "trigger": "gui_ANCHOR_TOP", "contents": "gui.ANCHOR_TOP"},
		{ "trigger": "gui_BLEND_ADD", "contents": "gui.BLEND_ADD"},
		{ "trigger": "gui_BLEND_ADD_ALPHA", "contents": "gui.BLEND_ADD_ALPHA"},
		{ "trigger": "gui_BLEND_ALPHA ", "contents": "gui.BLEND_ALPHA "},
		{ "trigger": "gui_BLEND_MULT", "contents": "gui.BLEND_MULT"},
		{ "trigger": "gui_CLIPPING_MODE_NONE", "contents": "gui.CLIPPING_MODE_NONE"},
		{ "trigger": "gui_CLIPPING_MODE_STENCIL", "contents": "gui.CLIPPING_MODE_STENCIL"},
		{ "trigger": "gui_KEYBOARD_TYPE_DEFAULT", "contents": "gui.KEYBOARD_TYPE_DEFAULT"},
		{ "trigger": "gui_KEYBOARD_TYPE_EMAIL", "contents": "gui.KEYBOARD_TYPE_EMAIL"},
		{ "trigger": "gui_KEYBOARD_TYPE_NUMBER_PAD", "contents": "gui.KEYBOARD_TYPE_NUMBER_PAD"},
		{ "trigger": "gui_KEYBOARD_TYPE_PASSWORD", "contents": "gui.KEYBOARD_TYPE_PASSWORD"},
		{ "trigger": "gui_PIEBOUNDS_ELLIPSE", "contents": "gui.PIEBOUNDS_ELLIPSE"},
		{ "trigger": "gui_PIEBOUNDS_RECTANGLE", "contents": "gui.PIEBOUNDS_RECTANGLE"},
		{ "trigger": "gui_PIVOT_CENTER", "contents": "gui.PIVOT_CENTER"},
		{ "trigger": "gui_PIVOT_E", "contents": "gui.PIVOT_E"},
		{ "trigger": "gui_PIVOT_N", "contents": "gui.PIVOT_N"},
		{ "trigger": "gui_PIVOT_NE", "contents": "gui.PIVOT_NE"},
		{ "trigger": "gui_PIVOT_NW", "contents": "gui.PIVOT_NW"},
		{ "trigger": "gui_PIVOT_S", "contents": "gui.PIVOT_S"},
		{ "trigger": "gui_PIVOT_SE", "contents": "gui.PIVOT_SE"},
		{ "trigger": "gui_PIVOT_SW", "contents": "gui.PIVOT_SW"},
		{ "trigger": "gui_PIVOT_W", "contents": "gui.PIVOT_W"},
		{ "trigger": "gui_PROP_COLOR", "contents": "gui.PROP_COLOR"},
		{ "trigger": "gui_PROP_FILL_ANGLE", "contents": "gui.PROP_FILL_ANGLE"},
		{ "trigger": "gui_PROP_INNER_RADIUS", "contents": "gui.PROP_INNER_RADIUS"},
		{ "trigger": "gui_PROP_OUTLINE", "contents": "gui.PROP_OUTLINE"},
		{ "trigger": "gui_PROP_POSITION", "contents": "gui.PROP_POSITION"},
		{ "trigger": "gui_PROP_ROTATION", "contents": "gui.PROP_ROTATION"},
		{ "trigger": "gui_PROP_SCALE", "contents": "gui.PROP_SCALE"},
		{ "trigger": "gui_PROP_SHADOW", "contents": "gui.PROP_SHADOW"},
		{ "trigger": "gui_PROP_SIZE", "contents": "gui.PROP_SIZE"},
		{ "trigger": "gui_PROP_SLICE9", "contents": "gui.PROP_SLICE9"},
		{ "trigger": "gui_SIZE_MODE_AUTO", "contents": "gui.SIZE_MODE_AUTO"},
		{ "trigger": "gui_SIZE_MODE_MANUAL", "contents": "gui.SIZE_MODE_MANUAL"},

		//GO
		{ "trigger": "go_animate(url, property, playback, to, easing, duration, [delay], [complete_function])","contents": "go.animate(${1:url}, ${2:property}, ${3:playback}, ${4:to}, ${5:easing}, ${6:duration}, ${7:[delay]}, ${8:[complete_function]})" },
		{ "trigger": "go_cancel_animations(url, property)","contents": "go.cancel_animations(${1:url}, ${2:property})" },
		{ "trigger": "go_delete([id])","contents": "go.delete(${1:[id]})" },
		{ "trigger": "go_delete_all([ids])","contents": "go.delete_all(${1:[ids]})" },
		{ "trigger": "go_get(url, property)","contents": "go.get(${1:url}, ${2:property})" },
		{ "trigger": "go_get_id([path])","contents": "go.get_id(${1:[path]})" },
		{ "trigger": "go_get_position([id])","contents": "go.get_position(${1:[id]})" },
		{ "trigger": "go_get_rotation([id])","contents": "go.get_rotation(${1:[id]})" },
		{ "trigger": "go_get_scale([id])","contents": "go.get_scale(${1:[id]})" },
		{ "trigger": "go_get_scale_uniform([id])","contents": "go.get_scale_uniform(${1:[id]})" },
		{ "trigger": "go_get_world_position([id])","contents": "go.get_world_position(${1:[id]})" },
		{ "trigger": "go_get_world_rotation([id])","contents": "go.get_world_rotation(${1:[id]})" },
		{ "trigger": "go_get_world_scale([id])","contents": "go.get_world_scale(${1:[id]})" },
		{ "trigger": "go_get_world_scale_uniform([id])","contents": "go.get_world_scale_uniform(${1:[id]})" },
		{ "trigger": "go_property(name, value)","contents": "go.property(${1:name}, ${2:value})" },
		{ "trigger": "go_set(url, property, value)","contents": "go.set(${1:url}, ${2:property}, ${2:value})" },
		{ "trigger": "go_set_position(position, [id])","contents": "go.set_position(${1:position}, ${2:[id]})" },
		{ "trigger": "go_set_rotation(rotation, [id])","contents": "go.set_rotation(${1:rotation}, ${2:[id]})" },
		{ "trigger": "go_set_scale(scale, [id])","contents": "go.set_scale(${1:scale}, ${2:[id]})" },
		//GO.MESSAGES
		{ "trigger": "go_msg_acquire_input_focus","contents": "msg.post('#my_component', 'acquire_input_focus')" },
		{ "trigger": "go_msg_disable","contents": "msg.post('#my_component', 'disable')" },
		{ "trigger": "go_msg_enable","contents": "msg.post('#my_component', 'enable')" },
		{ "trigger": "go_msg_release_input_focus","contents": "msg.post('#my_component', 'release_input_focus')" },
		{ "trigger": "go_msg_set_parent","contents": "msg.post('#my_component', 'set_parent', {parent_id=…, keep_world_transform=…  })" },
		// GO CONSTANTS
		{ "trigger": "go_PLAYBACK_LOOP_BACKWARD", "contents": "go.PLAYBACK_LOOP_BACKWARD" },
		{ "trigger": "go_PLAYBACK_LOOP_FORWARD", "contents": "go.PLAYBACK_LOOP_FORWARD" },
		{ "trigger": "go_PLAYBACK_LOOP_PINGPONG", "contents": "go.PLAYBACK_LOOP_PINGPONG" },
		{ "trigger": "go_PLAYBACK_NONE", "contents": "go.PLAYBACK_NONE" },
		{ "trigger": "go_PLAYBACK_ONCE_BACKWARD ", "contents": "go.PLAYBACK_ONCE_BACKWARD" },
		{ "trigger": "go_PLAYBACK_ONCE_PINGPONG", "contents": "go.PLAYBACK_ONCE_PINGPONG"},
		{ "trigger": "go_PLAYBACK_ONCE_PINGPONG", "contents": "go.PLAYBACK_ONCE_PINGPONG"},
		{ "trigger": "go_EASING_INBACK", "contents": "go.EASING_INBACK"},
		{ "trigger": "go_EASING_INBOUNCE", "contents": "go.EASING_INBOUNCE"},
		{ "trigger": "go_EASING_INCIRC", "contents": "go.EASING_INCIRC"},
		{ "trigger": "go_EASING_INCUBIC", "contents": "go.EASING_INCUBIC"},
		{ "trigger": "go_EASING_INELASTIC", "contents": "go.EASING_INELASTIC"},
		{ "trigger": "go_EASING_INEXPO", "contents": "go.EASING_INEXPO"},
		{ "trigger": "go_EASING_INOUTBACK", "contents": "go.EASING_INOUTBACK"},
		{ "trigger": "go_EASING_INOUTBOUNCE", "contents": "go.EASING_INOUTBOUNCE"},
		{ "trigger": "go_EASING_INOUTCIRC", "contents": "go.EASING_INOUTCIRC"},
		{ "trigger": "go_EASING_INOUTCUBIC", "contents": "go.EASING_INOUTCUBIC"},
		{ "trigger": "go_EASING_INOUTELASTIC", "contents": "go.EASING_INOUTELASTIC"},
		{ "trigger": "go_EASING_INOUTEXPO", "contents": "go.EASING_INOUTEXPO"},
		{ "trigger": "go_EASING_INOUTQUAD", "contents": "go.EASING_INOUTQUAD"},
		{ "trigger": "go_EASING_INOUTQUART", "contents": "go.EASING_INOUTQUART"},
		{ "trigger": "go_EASING_INOUTQUINT", "contents": "go.EASING_INOUTQUINT"},
		{ "trigger": "go_EASING_INOUTSINE", "contents": "go.EASING_INOUTSINE"},
		{ "trigger": "go_EASING_INQUAD", "contents": "go.EASING_INQUAD"},
		{ "trigger": "go_EASING_INQUART", "contents": "go.EASING_INQUART"},
		{ "trigger": "go_EASING_INQUINT", "contents": "go.EASING_INQUINT"},
		{ "trigger": "go_EASING_INSINE", "contents": "go.EASING_INSINE"},
		{ "trigger": "go_EASING_LINEAR", "contents": "go.EASING_LINEAR"},
		{ "trigger": "go_EASING_OUTBACK", "contents": "go.EASING_OUTBACK"},
		{ "trigger": "go_EASING_OUTBOUNCE", "contents": "go.EASING_OUTBOUNCE"},
		{ "trigger": "go_EASING_OUTCIRC", "contents": "go.EASING_OUTCIRC"},
		{ "trigger": "go_EASING_OUTCUBIC", "contents": "go.EASING_OUTCUBIC"},
		{ "trigger": "go_EASING_OUTELASTIC", "contents": "go.EASING_OUTELASTIC"},
		{ "trigger": "go_EASING_OUTEXPO", "contents": "go.EASING_OUTEXPO"},
		{ "trigger": "go_EASING_OUTINBACK", "contents": "go.EASING_OUTINBACK"},
		{ "trigger": "go_EASING_OUTINBOUNCE", "contents": "go.EASING_OUTINBOUNCE"},
		{ "trigger": "go_EASING_OUTINCIRC", "contents": "go.EASING_OUTINCIRC"},
		{ "trigger": "go_EASING_OUTINCUBIC", "contents": "go.EASING_OUTINCUBIC"},
		{ "trigger": "go_EASING_OUTINELASTIC", "contents": "go.EASING_OUTINELASTIC"},
		{ "trigger": "go_EASING_OUTINEXPO", "contents": "go.EASING_OUTINEXPO"},
		{ "trigger": "go_EASING_OUTINQUAD", "contents": "go.EASING_OUTINQUAD"},
		{ "trigger": "go_EASING_OUTINQUART", "contents": "go.EASING_OUTINQUART"},
		{ "trigger": "go_EASING_OUTINQUINT", "contents": "go.EASING_OUTINQUINT"},
		{ "trigger": "go_EASING_OUTINSINE", "contents": "go.EASING_OUTINSINE"},
		{ "trigger": "go_EASING_OUTQUAD", "contents": "go.EASING_OUTQUAD"},
		{ "trigger": "go_EASING_OUTQUART", "contents": "go.EASING_OUTQUART"},
		{ "trigger": "go_EASING_OUTQUINT", "contents": "go.EASING_OUTQUINT"},
		{ "trigger": "go_EASING_OUTSINE", "contents": "go.EASING_OUTSINE"},
		//PROFILER
		{ "trigger": "profiler_get_cpu_usage()","contents": "profiler.get_cpu_usage()" },
		{ "trigger": "profiler_get_memory_usage()","contents": "profiler.get_memory_usage()" },
		//RENDER
		{ "trigger": "render_clear(buffers)","contents": "render.clear(${1:buffers})" },
		{ "trigger": "render_constant_buffer()","contents": "render.constant_buffer()" },
		{ "trigger": "render_delete_render_target(render_target)","contents": "render.delete_render_target(${1:render_target})" },
		{ "trigger": "render_disable_material()","contents": "render.disable_material()" },
		{ "trigger": "render_disable_render_target(render_target)","contents": "render.disable_render_target(${1:render_target})" },
		{ "trigger": "render_disable_state(state)","contents": "render.disable_state(${1:state})" },
		{ "trigger": "render_disable_texture(unit, render_target)","contents": "render.disable_texture(${1:unit}, ${2:render_target})" },
		{ "trigger": "render_draw(predicate, [constants])","contents": "render.draw(${1:predicate}, ${2:[constants]})" },
		{ "trigger": "render_draw_debug3d()","contents": "render.draw_debug3d()" },
		{ "trigger": "render_enable_material(material_id)","contents": "render.enable_material(${1:material_id})" },
		{ "trigger": "render_enable_render_target(render_target)","contents": "render.enable_render_target(${1:render_target})" },
		{ "trigger": "render_enable_state(state)","contents": "render.enable_state(${1:state})" },
		{ "trigger": "render_enable_texture(unit, render_target, buffer_type)","contents": "render.enable_texture(${1:unit}, ${2:render_target}, ${3:buffer_type})" },
		{ "trigger": "render_get_height()","contents": "render.get_height()" },
		{ "trigger": "render_get_render_target_height(render_target, buffer_type)","contents": "render.get_render_target_height(${1:render_target}, ${2:buffer_type})" },
		{ "trigger": "render_get_render_target_width(render_target, buffer_type)","contents": "render.get_render_target_width(${1:render_target}, ${2:buffer_type})" },
		{ "trigger": "render_get_width()","contents": "render.get_width()" },
		{ "trigger": "render_get_window_height()","contents": "render.get_window_height()" },
		{ "trigger": "render_get_window_width()","contents": "render.get_window_width()" },
		{ "trigger": "render_predicate(tags)","contents": "render.predicate(${1:tags})" },
		{ "trigger": "render_render_target(name, parameters)","contents": "render.render_target(${1:name}, ${2:parameters})" },
		{ "trigger": "render_set_blend_func(source_factor, destination_factor)","contents": "render.set_blend_func(${1:source_factor}, ${2:destination_factor})" },
		{ "trigger": "render_set_color_mask(red, green, blue, alpha)","contents": "render.set_color_mask(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})" },
		{ "trigger": "render_set_cull_face(face_type)","contents": "render.set_cull_face(${1:face_type})" },
		{ "trigger": "render_set_depth_func(func)","contents": "render.set_depth_func(${1:func})" },
		{ "trigger": "render_set_depth_mask(depth)","contents": "render.set_depth_mask(${1:depth})" },
		{ "trigger": "render_set_polygon_offset(factor, units)","contents": "render.set_polygon_offset(${1:factor}, ${2:units})" },
		{ "trigger": "render_set_projection(matrix)","contents": "render.set_projection(${1:matrix})" },
		{ "trigger": "render_set_render_target_size(render_target, width, height)","contents": "render.set_render_target_size(${1:render_target}, ${2:width}, ${3:height})" },
		{ "trigger": "render_set_stencil_func(func, ref, mask)","contents": "render.set_stencil_func(${1:func}, ${2:ref}, ${3:mask})" },
		{ "trigger": "render_set_stencil_mask(mask)","contents": "render.set_stencil_mask(${1:mask})" },
		{ "trigger": "render_set_stencil_op(sfail, dpfail, dppass)","contents": "render.set_stencil_op(${1:sfail}, ${2:dpfail}, ${3:dppass})" },
		{ "trigger": "render_set_view(matrix)","contents": "render.set_view(${1:matrix})" },
		{ "trigger": "render_set_viewport(x, y, width, height)","contents": "render.set_viewport(${1:x}, ${2:y}, ${3:width}, ${4:height})" },
		//RENDER.MESSAGES
		{ "trigger": "render_clear_color","contents": "msg.post('@render:', 'clear_color', { color = vmath.vector4(${1:r}, ${2:g}, ${3:b}, ${4:a}) } )" },
		{ "trigger": "render_draw_line","contents": "msg.post('@render:', 'draw_line', { start_point = vmath.vector3(${1:x}, ${2:y}, ${3:z}), end_point = vmath.vector3(${1:x}, ${2:y}, ${3:z}), color = vmath.vector4(${1:r}, ${2:g}, ${3:b}, ${4:a}) } )" },
		{ "trigger": "render_draw_text","contents": "msg.post('@render:', 'draw_text', { text = ... , position = vmath.vector3(${1:x}, ${2:y}, ${3:z}) } )" },
		{ "trigger": "render_window_resized","contents": "window_resized" },
		//RESOURCE
		{ "trigger": "resource_get_current_manifest()","contents": "resource.get_current_manifest()" },
		{ "trigger": "resource_load(path)","contents": "resource.load(${1:path})" },
		{ "trigger": "resource_set(path, buffer)","contents": "resource.set(${1:path}, ${2:buffer})" },
		{ "trigger": "resource_set_texture(path, table, buffer)","contents": "resource.set_texture(${1:path}, ${2:table}, ${3:buffer})" },
		{ "trigger": "resource_store_resource(manifest_reference, data, hexdigest, callback)","contents": "resource.store_resource(${1:manifest_reference}, ${2:data}, ${3:hexdigest}, ${4:callback})" },
		//SYS
		{ "trigger": "sys_get_application_info(app_string)","contents": "sys.get_application_info(${1:app_string})" },
		{ "trigger": "sys_get_config(key)","contents": "sys.get_config(${1:key})" },
		{ "trigger": "sys_get_config(key, default_value)","contents": "sys.get_config(${1:key}, ${2:default_value})" },
		{ "trigger": "sys_get_connectivity()","contents": "sys.get_connectivity()" },
		{ "trigger": "sys_get_engine_info()","contents": "sys.get_engine_info()" },
		{ "trigger": "sys_get_ifaddrs()","contents": "sys.get_ifaddrs()" },
		{ "trigger": "sys_get_save_file(application_id, file_name)","contents": "sys.get_save_file(${1:application_id}, ${2:file_name})" },
		{ "trigger": "sys_get_sys_info()","contents": "sys.get_sys_info()" },
		{ "trigger": "sys_load(filename)","contents": "sys.load(${1:filename})" },
		{ "trigger": "sys_load_resource(filename)","contents": "sys.load_resource(${1:filename})" },
		{ "trigger": "sys_open_url(url)","contents": "sys.open_url(${1:url})" },
		{ "trigger": "sys_save(filename, table)","contents": "sys.save(${1:filename}, ${2:table})" },
		{ "trigger": "sys_set_connectivity_host(host)","contents": "sys.set_connectivity_host(${1:host})" },
		{ "trigger": "sys_set_error_handler(error_handler)","contents": "sys.set_error_handler(${1:error_handler})" },
		//SYS.MESSAGES
		{ "trigger": "sys_msg_exit","contents": "msg.post('@system:', 'exit', {code = 0})" },
		{ "trigger": "sys_msg_reboot","contents": "msg.post('@system:', 'reboot', {arg1 = .., arg2 = .., arg3=…, arg4=…, arg5=…, arg6=… )" },
		{ "trigger": "sys_msg_set_update_frequency","contents": "msg.post('@system:', 'set_update_frequency', { frequency = ${1:frequency} } )" },
		{ "trigger": "sys_msg_start_record","contents": "msg.post('@system:', 'start_record', { file_name = ..., frame_period = ..., fps = ...  } )" },
		{ "trigger": "sys_msg_stop_record","contents": "msg.post('@system:', 'stop_record')" },
		{ "trigger": "sys_toggle_physics_debug","contents": "msg.post('@system:', 'toggle_physics_debug')" },
		{ "trigger": "sys_msg_toggle_profile","contents": "msg.post('@system:', 'toggle_profile')" },
		//WINDOW
		{ "trigger": "window_get_dim_mode()","contents": "window.get_dim_mode()" },
		{ "trigger": "window_set_dim_mode(mode)","contents": "window.set_dim_mode(${1:mode})" },
		{ "trigger": "window_set_listener(callback)","contents": "window.set_listener(${1:callback})" },
		//CAMERA.MESSAGES
		{ "trigger": "camera_acquire_camera_focus","contents": "msg.post('#camera', 'acquire_camera_focus')" },
		{ "trigger": "camera_release_camera_focus","contents": "msg.post('#camera', 'release_camera_focus')" },
		{ "trigger": "camera_set_camera","contents": "msg.post('#camera', 'set_camera', {aspect_ratio = ..., fov = ..., near_z = ..., far_z = ...})" },
		//COLLECTIONFACTORY
		{ "trigger": "collectionfactory_create(url, [position], [rotation], [properties], [scale])","contents": "collectionfactory.create(${1:url}, ${2:[position]}, ${3:[rotation]}, ${4:[properties]}, ${5:[scale]})" },
		//COLLECTIONPROXY
		{ "trigger": "collectionproxy_missing_resources(collectionproxy)","contents": "collectionproxy.missing_resources(${1:collectionproxy})" },
		//COLLECTIONPROXY.MESSAGES
		{ "trigger": "collectionproxy_async_load","contents": "msg.post('#proxy', 'async_load')" },
		{ "trigger": "collectionproxy_disable","contents": "msg.post('#proxy', 'disable')" },
		{ "trigger": "collectionproxy_enable","contents": "msg.post('#proxy', 'enable')" },
		{ "trigger": "collectionproxy_final","contents": "msg.post('#proxy', 'final')" },
		{ "trigger": "collectionproxy_init","contents": "msg.post('#proxy', 'init')" },
		{ "trigger": "collectionproxy_load","contents": "msg.post('#proxy', 'load')" },
		{ "trigger": "collectionproxy_proxy_loaded","contents": "proxy_loaded" },
		{ "trigger": "collectionproxy_proxy_unloaded","contents": "proxy_unloaded" },
		{ "trigger": "collectionproxy_set_time_step","contents": "msg.post('#proxy', 'set_time_step', {factor = ..., mode = ...})" },
		{ "trigger": "collectionproxy_unload","contents": "msg.post('#proxy', 'unload')" },
		//COLLISIONOBJECT
		{ "trigger": "physics_ray_cast(from, to, groups, [request_id])","contents": "physics.ray_cast(${1:from}, ${2:to}, ${3:groups}, ${4:[request_id]})" },
		//COLLISIONOBJECT.MESSAGES
		{ "trigger": "collobj_apply_force","contents": "msg.post('#co', 'apply_force', {force = vmath.vector3(${1:x}, ${2:y}, ${3:z}), position = vmath.vector3(${1:x}, ${2:y}, ${3:z})})" },
		{ "trigger": "collobj_collision_response","contents": "collision_response" },
		{ "trigger": "collobj_contact_point_response","contents": "contact_point_response" },
		{ "trigger": "collobj_ray_cast_response","contents": "ray_cast_response" },
		{ "trigger": "collobj_trigger_response","contents": "trigger_response" },
		//FACTORY
		{ "trigger": "factory_create(url, [position], [rotation], [properties], [scale])","contents": "factory.create(${1:url}, ${2:[position]}, ${3:[rotation]}, ${4:[properties]}, ${5:[scale]})" },
		//LABEL
		{ "trigger": "label_set_text(url, text)","contents": "label.set_text(${1:url}, ${2:text})" },
		//MODEL
		{ "trigger": "model_cancel(url)","contents": "model.cancel(${1:url})" },
		{ "trigger": "model_get_go(url, bone_id)","contents": "model.get_go(${1:url}, ${2:bone_id})" },
		{ "trigger": "model_play_anim(url, anim_id, playback, [play_properties], [complete_function])","contents": "model.play_anim(${1:url}, ${2:anim_id}, ${3:playback}, ${4:[play_properties]}, ${5:[complete_function]})" },
		{ "trigger": "model_reset_constant(url, constant)","contents": "model.reset_constant(${1:url}, ${2:constant})" },
		{ "trigger": "model_set_constant(url, constant, value)","contents": "model.set_constant(${1:url}, ${2:constant}, ${3:value})" },
		//MODEL.MESSAGES
		{ "trigger": "model_animation_done","contents": "model_animation_done" },
		//PARTICLEFX
		{ "trigger": "particlefx_play(url, [emitter_state_function])","contents": "particlefx.play(${1:url}, ${2:[emitter_state_function]})" },
		{ "trigger": "particlefx_reset_constant(url, emitter, constant)","contents": "particlefx.reset_constant(${1:url}, ${2:emitter}, ${3:constant})" },
		{ "trigger": "particlefx_set_constant(url, emitter, constant, value)","contents": "particlefx.set_constant(${1:url}, ${2:emitter}, ${3:constant}, ${4:value})" },
		{ "trigger": "particlefx_stop(url)","contents": "particlefx.stop(${1:url})" },
		//SOUND
		{ "trigger": "sound_get_group_gain(group)","contents": "sound.get_group_gain(${1:group})" },
		{ "trigger": "sound_get_group_name(group)","contents": "sound.get_group_name(${1:group})" },
		{ "trigger": "sound_get_groups()","contents": "sound.get_groups()" },
		{ "trigger": "sound_get_peak(group, window)","contents": "sound.get_peak(${1:group}, ${2:window})" },
		{ "trigger": "sound_get_rms(group, window)","contents": "sound.get_rms(${1:group}, ${2:window})" },
		{ "trigger": "sound_is_music_playing()","contents": "sound.is_music_playing()" },
		{ "trigger": "sound_is_phone_call_active()","contents": "sound.is_phone_call_active()" },
		{ "trigger": "sound_set_group_gain(group, gain)","contents": "sound.set_group_gain(${1:group}, ${2:gain})" },
		{ "trigger": "sound_set_gain(url, gain)","contents": "sound.set_gain(${1:url}, ${2:gain})" },
		{ "trigger": "sound_play(url, [play_properties])","contents": "sound.play(${1:url}, { delay = 1, gain = 0.5 })" },
		{ "trigger": "sound_stop(url)","contents": "sound.stop(${1:url})" },
		//SOUND.MESSAGES
		{ "trigger": "sound_play_sound","contents": "msg.post('#sound', 'play_sound', {delay = 0, gain = 1})" },
		{ "trigger": "sound_set_gain","contents": "msg.post('#sound', 'set_gain', {gain = 1})" },
		{ "trigger": "sound_stop_sound","contents": "msg.post('#sound', 'stop_sound')" },
		//SPINE
		{ "trigger": "spine_cancel(url)","contents": "spine.cancel(${1:url})" },
		{ "trigger": "spine_get_go(url, bone_id)","contents": "spine.get_go(${1:url}, ${2:bone_id})" },
		{ "trigger": "spine_play_anim(url, anim_id, playback, [play_properties], [complete_function])","contents": "spine.play_anim(${1:url}, ${2:anim_id}, ${3:playback}, ${4:[play_properties]}, ${5:[complete_function]})" },
		{ "trigger": "spine_reset_constant(url, constant)","contents": "spine.reset_constant(${1:url}, ${2:constant})" },
		{ "trigger": "spine_set_constant(url, constant, value)","contents": "spine.set_constant(${1:url}, ${2:constant}, ${2:value})" },
		{ "trigger": "spine_set_ik_target(url, ik_constraint_id, target_url)","contents": "spine.set_ik_target(${1:url}, ${2:ik_constraint_id}, ${3:target_url})" },
		{ "trigger": "spine_set_ik_target_position(url, ik_constraint_id, position)","contents": "spine.set_ik_target_position(${1:url}, ${2:ik_constraint_id}, ${3:position})" },
		{ "trigger": "spine.set_skin(url, spine_skin, [spine_slot])","contents": "spine.set_skin(${1:url}, ${2:spine_skin}, ${3:[spine_slot]})" },
		//SPINE.MESSAGES
		{ "trigger": "spine_animation_done","contents": "spine_animation_done" },
		{ "trigger": "spine_event","contents": "spine_event" },
		//SPRITE
		{ "trigger": "sprite_reset_constant(url, constant)","contents": "sprite.reset_constant(${1:url}, ${2:constant})" },
		{ "trigger": "sprite_set_constant(url, constant, value)","contents": "sprite.set_constant(${1:url}, ${2:constant}, ${3:value})" },
		{ "trigger": "sprite_set_hflip(url, flip)","contents": "sprite.set_hflip(${1:url}, ${2:flip})" },
		{ "trigger": "sprite_set_vflip(url, flip)","contents": "sprite.set_vflip(${1:url}, ${2:flip})" },
		//SPRITE.MESSAGES
		{ "trigger": "sprite_animation_done","contents": "animation_done" },
		{ "trigger": "sprite_play_animation","contents": "msg.post('#sprite', 'play_animation', {id = hash('jump')})" },
		//TILEMAP
		{ "trigger": "tilemap_get_bounds(url)","contents": "tilemap.get_bounds(${1:url})" },
		{ "trigger": "tilemap_get_tile(url, layer, x, y)","contents": "tilemap.get_tile(${1:url}, ${2:layer}, ${3:x}, ${4:y})" },
		{ "trigger": "tilemap_reset_constant(url, constant)","contents": "tilemap.reset_constant(${1:url}, ${2:constant})" },
		{ "trigger": "tilemap_set_constant(url, constant, value)","contents": "tilemap.set_constant(${1:url}, ${2:constant}, ${3:value})" },
		{ "trigger": "tilemap_set_tile(url, layer, x, y, tile, [h-flipped], [v-flipped])","contents": "tilemap.set_tile(${1:url}, ${2:layer}, ${4:x}, ${5:y}, ${6:tile}, ${7:[h-flipped]}, ${8:[v-flipped]})" },
		//BUFFER
		{ "trigger": "buffer_copy_buffer(dst, dstoffset, src, srcoffset, count)","contents": "buffer.copy_buffer(${1:dst}, ${2:dstoffset}, ${3:src}, ${4:srcoffset}, ${5:count})" },
		{ "trigger": "buffer_copy_stream(dst, dstoffset, src, srcoffset, count)","contents": "buffer.copy_stream(${1:dst}, ${2:dstoffset}, ${3:src}, ${4:srcoffset}, ${5:count})" },
		{ "trigger": "buffer_create(element_count, declaration)","contents": "buffer.create(${1:element_count}, ${2:declaration})" },
		{ "trigger": "buffer_get_bytes(buffer, stream_name)","contents": "buffer.get_bytes(${1:buffer}, ${2:stream_name})" },
		{ "trigger": "buffer_get_stream(buffer, stream_name)","contents": "buffer.get_stream(${1:buffer}, ${2:stream_name})" },
		//BUILTINS
		{ "trigger": "hash(s)","contents": "hash(${1:s})" },
		{ "trigger": "hash_to_hex(h)","contents": "hash_to_hex(${1:h})" },
		{ "trigger": "pprint(v)","contents": "pprint(${1:v})" },
		//HTML5
		{ "trigger": "html5_run(code)","contents": "html5.run(${1:code})" },
		//HTTP
		{ "trigger": "http_request(url, method, callback, [headers], [post_data], [options])","contents": "http.request(${1:url}, ${2:method}, ${3:callback}, ${4:[headers]}, ${5:[post_data]}, ${6:[options]})" },
		//IMAGE
		{ "trigger": "image_load(buffer, [premult])","contents": "image.load(${1:buffer}, ${2:[premult]})" },
		//JSON
		{ "trigger": "json_decode(json)","contents": "json.decode(${1:json})" },
		//MESSAGE
		{ "trigger": "msg_post(receiver, message_id, [message])","contents": "msg.post(${1:receiver}, ${2:message_id}, ${3:[message]})" },
		{ "trigger": "msg_url()","contents": "msg.url()" },
		{ "trigger": "msg_url(urlstring)","contents": "msg.url(${1:urlstring})" },
		{ "trigger": "msg_url([socket], [path], [fragment])","contents": "msg.url(${1:[socket]}, ${2:[path]}, ${3:[fragment]})" },
		//VECTORMATH
		{ "trigger": "vmath_conj(q1)","contents": "vmath.conj(${1:q1})" },
		{ "trigger": "vmath_cross(v1, v2)","contents": "vmath.cross(${1:v1}, ${2:v2})" },
		{ "trigger": "vmath_dot(v1, v2)","contents": "vmath.dot(${1:v1}, ${2:v2})" },
		{ "trigger": "vmath_inv(m1)","contents": "vmath.inv(${1:m1})" },
		{ "trigger": "vmath_length(v)","contents": "vmath.length(${1:v})" },
		{ "trigger": "vmath_length_sqr(v)","contents": "vmath.length_sqr(${1:v})" },
		{ "trigger": "vmath_lerp(t, v1, v2)","contents": "vmath.lerp(${1:t}, ${2:v1}, ${3:v2})" },
		{ "trigger": "vmath_lerp(t, q1, q2)","contents": "vmath.lerp(${1:t}, ${2:q1}, ${3:q2})" },
		{ "trigger": "vmath_lerp(t, n1, n2)","contents": "vmath.lerp(${1:t}, ${2:n1}, ${4:n2})" },
		{ "trigger": "vmath_matrix4()","contents": "vmath.matrix4()" },
		{ "trigger": "vmath_matrix4(m1)","contents": "vmath.matrix4(${1:m1})" },
		{ "trigger": "vmath_matrix4_axis_angle(v, angle)","contents": "vmath.matrix4_axis_angle(${1:v}, ${2:angle})" },
		{ "trigger": "vmath_matrix4_from_quat(q)","contents": "vmath.matrix4_from_quat(${1:q})" },
		{ "trigger": "vmath_matrix4_frustum(left, right, bottom, top, near, far)","contents": "vmath.matrix4_frustum(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far})" },
		{ "trigger": "vmath_matrix4_look_at(eye, look_at, up)","contents": "vmath.matrix4_look_at(${1:eye}, ${2:look_at}, ${3:up})" },
		{ "trigger": "vmath_matrix4_orthographic(left, right, bottom, top, near, far)","contents": "vmath.matrix4_orthographic(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far})" },
		{ "trigger": "vmath_matrix4_perspective(fov, aspect, near, far)","contents": "vmath.matrix4_perspective(${1:fov}, ${2:aspect}, ${3:near}, ${4:far})" },
		{ "trigger": "vmath_matrix4_rotation_x(angle)","contents": "vmath.matrix4_rotation_x(${1:angle})" },
		{ "trigger": "vmath_matrix4_rotation_y(angle)","contents": "vmath.matrix4_rotation_y(${1:angle})" },
		{ "trigger": "vmath_matrix4_rotation_z(angle)","contents": "vmath.matrix4_rotation_z(${1:angle})" },
		{ "trigger": "vmath_normalize(v1)","contents": "vmath.normalize(${1:v1})" },
		{ "trigger": "vmath_ortho_inv(m1)","contents": "vmath.ortho_inv(${1:m1})" },
		{ "trigger": "vmath_project(v1, v2)","contents": "vmath.project(${1:v1}, ${2:v2})" },
		{ "trigger": "vmath_quat()","contents": "vmath.quat()" },
		{ "trigger": "vmath_quat(q1)","contents": "vmath.quat(${1:q1})" },
		{ "trigger": "vmath_quat(x, y, z, w)","contents": "vmath.quat(${1:x}, ${2:y}, ${3:z}, ${4:w})" },
		{ "trigger": "vmath_quat_axis_angle(v, angle)","contents": "vmath.quat_axis_angle(${1:v}, ${2:angle})" },
		{ "trigger": "vmath_quat_basis(x, y, z)","contents": "vmath.quat_basis(${1:x}, ${2:y}, ${3:z})" },
		{ "trigger": "vmath_quat_from_to(v1, v2)","contents": "vmath.quat_from_to(${1:v1}, ${2:v2})" },
		{ "trigger": "vmath_quat_rotation_x(angle)","contents": "vmath.quat_rotation_x(${1:angle})" },
		{ "trigger": "vmath_quat_rotation_y(angle)","contents": "vmath.quat_rotation_y(${1:angle})" },
		{ "trigger": "vmath_quat_rotation_z(angle)","contents": "vmath.quat_rotation_z(${1:angle})" },
		{ "trigger": "vmath_rotate(q, v1)","contents": "vmath.rotate(${1:q}, ${2:v1})" },
		{ "trigger": "vmath_slerp(t, v1, v2)","contents": "vmath.slerp(${1:t}, ${2:v1}, ${3:v2})" },
		{ "trigger": "vmath_slerp(t, q1, q2)","contents": "vmath.slerp(${1:t}, ${2:q1}, ${3:q2})" },
		{ "trigger": "vmath_vector(t)","contents": "vmath.vector(${1:t})" },
		{ "trigger": "vmath_vector3()","contents": "vmath.vector3()" },
		{ "trigger": "vmath_vector3(n)","contents": "vmath.vector3(${1:n})" },
		{ "trigger": "vmath_vector3(v1)","contents": "vmath.vector3(${1:v1})" },
		{ "trigger": "vmath_vector3(x, y, z)","contents": "vmath.vector3(${1:x}, ${2:y}, ${3:z})" },
		{ "trigger": "vmath_vector4()","contents": "vmath.vector4()" },
		{ "trigger": "vmath_vector4(n)","contents": "vmath.vector4(${1:n})" },
		{ "trigger": "vmath_vector4(v1)","contents": "vmath.vector4(${1:v1})" },
		{ "trigger": "vmath_vector4(x, y, z, w)","contents": "vmath.vector4(${1:x}, ${2:y}, ${3:z}, ${4:w})" },
		//ZLIB
		{ "trigger": "zlib_deflate(buf)","contents": "zlib.deflate(${1:buf})" },
		{ "trigger": "zlib_inflate(buf)","contents": "zlib.inflate(${1:buf})" },
		//FACEBOOK
		{ "trigger": "facebook_access_token()","contents": "facebook.access_token()" },
		{ "trigger": "facebook_disable_event_usage()","contents": "facebook.disable_event_usage()" },
		{ "trigger": "facebook_enable_event_usage()","contents": "facebook.enable_event_usage()" },
		{ "trigger": "facebook_login_with_publish_permissions(permissions, audience, callback)","contents": "facebook.login_with_publish_permissions(${1:permissions}, ${2:audience}, ${3:callback})" },
		{ "trigger": "facebook_login_with_read_permissions(permissions, callback)","contents": "facebook.login_with_read_permissions(${1:permissions}, ${2:callback})" },
		{ "trigger": "facebook_logout()","contents": "facebook.logout()" },
		{ "trigger": "facebook_permissions()","contents": "facebook.permissions()" },
		{ "trigger": "facebook_post_event(event, value, [params])","contents": "facebook.post_event(${1:event}, ${2:value}, ${3:[params]})" },
		{ "trigger": "facebook_show_dialog(dialog, param, callback)","contents": "facebook.show_dialog(${1:dialog}, ${2:param}, ${3:callback})" },
		//In-app purchases
		{ "trigger": "iap_buy(id, [options])","contents": "iap.buy(${1:id}, ${2:[options]})" },
		{ "trigger": "iap_finish(transaction)","contents": "iap.finish(${1:transaction})" },
		{ "trigger": "iap_get_provider_id()","contents": "iap.get_provider_id()" },
		{ "trigger": "iap_list(ids, callback)","contents": "iap.list(${1:ids}, ${2:callback})" },
		{ "trigger": "iap_restore()","contents": "iap.restore()" },
		{ "trigger": "iap_set_listener(listener)","contents": "iap.set_listener(${1:listener})" },
		//Inter-app communication
		{ "trigger": "iac_set_listener(listener)","contents": "iac.set_listener(${1:listener})" },
		//Push notifications
		{ "trigger": "push_cancel(id)","contents": "push.cancel(${1:id})" },
		{ "trigger": "push_get_all_scheduled()","contents": "push.get_all_scheduled()" },
		{ "trigger": "push_get_scheduled(id)","contents": "push.get_scheduled(${1:id})" },
		{ "trigger": "push_register(notifications, callback)","contents": "push.register(${1:notifications}, ${2:callback})" },
		{ "trigger": "push_schedule(time, title, alert, payload, notification_settings)","contents": "push.schedule(${1:time}, ${2:title}, ${3:alert}, ${4:payload}, ${5:notification_settings})" },
		{ "trigger": "push_set_badge_count(count)","contents": "push.set_badge_count(${1:count})" },
		{ "trigger": "push_set_listener(listener)","contents": "push.set_listener(${1:listener})" },
		//WEBVIEW
		{ "trigger": "webview_create(callback)","contents": "webview.create(${1:callback})" },
		{ "trigger": "webview_destroy(webview_id)","contents": "webview.destroy(${1:webview_id})" },
		{ "trigger": "webview_eval(webview_id, code)","contents": "webview.eval(${1:webview_id}, ${2:code})" },
		{ "trigger": "webview_is_visible(webview_id)","contents": "webview.is_visible(${1:webview_id})" },
		{ "trigger": "webview_open(webview_id, url, options)","contents": "webview.open(${1:webview_id}, ${2:url}, ${2:options})" },
		{ "trigger": "webview_open_raw(webview_id, html, options)","contents": "webview.open_raw(${1:webview_id}, ${2:html}, ${3:options})" },
		{ "trigger": "webview_set_visible(webview_id, visible)","contents": "webview.set_visible(${1:webview_id}, ${2:visible})" },
		//Timer
		{ "trigger": "timer.cancel(handle)","contents": "timer.cancel(${1:handle})" },
		{ "trigger": "timer_delay(delay, repeat, callback)","contents": "timer.delay(${1:delay}, ${2:repeat}, ${3:callback})" },
		//Flow
		{ "trigger": "flow_gui_animate(node, property, playback, to, easing, duration, [delay])","contents": "flow.gui_animate(${1:node}, ${2:property}, ${3:playback}, ${4:to}, ${5:easing}, ${6:duration}, ${7:[delay]})" },
		{ "trigger": "flow_go_animate(url, property, playback, to, easing, duration, [delay])","contents": "flow.go_animate(${1:url}, ${2:property}, ${3:playback}, ${4:to}, ${5:easing}, ${6:duration}, ${7:[delay]})" },
		{ "trigger": "flow_update(dt)","contents": "flow.update(${1:dt})" },
		{ "trigger": "flow_delay(seconds)","contents": "flow.delay(${1:seconds})" },
		{ "trigger": "flow_frames(frames)","contents": "flow.frames(${1:frames})" },
		{ "trigger": "flow_until_true(fn)","contents": "flow.until_true(${1:fn})" },
		{ "trigger": "flow_until_any_message()","contents": "flow.until_any_message()" },
		{ "trigger": "flow_until_message( ... )", "contents": "flow.until_message( ${1:...} )" },
		{ "trigger": "flow_until_input_pressed( ... )", "contents": "flow.until_input_pressed( ${1:...} )" },
		{ "trigger": "flow_until_input_released( ... )", "contents": "flow.until_input_released( ${1:...} )" },
		{ "trigger": "flow_until_callback(fn, ...)", "contents": "flow.until_callback( ${1:fn},${2:...} )" },
		{ "trigger": "flow_play_animation(sprite_url, id)", "contents": "flow.play_animation( ${1:sprite_url},${2:id} )" },
		{ "trigger": "flow_stop([instance])","contents": "flow.stop(${1:[instance]})" },
		{ "trigger": "flow_resume(instance)","contents": "flow.stop(${1:instance})" },
		{ "trigger": "flow_load(collection_url)","contents": "flow.load(${1:collection_url})" },
		{ "trigger": "flow_unload(collection_url)","contents": "flow.unload(${1:collection_url})" },
		{ "trigger": "flow_on_message(message_id, message, sender)","contents": "flow.on_message(${1:message_id}, ${2:message}, ${3:sender})" },
		{ "trigger": "flow_on_input(action_id, action)","contents": "flow.on_input(${1:action_id}, ${2:action})" },
		{ "trigger": "flow_ray_cast(from, to, groups)","contents": "flow.ray_cast(${1:from}, ${2:to}, ${3:groups})" },
		{ "trigger": "flow_start(fn, [options], [on_error])","contents": "flow.start(${1:fn}, ${2:[options]}, ${3:[on_error]})" },
	]
}
